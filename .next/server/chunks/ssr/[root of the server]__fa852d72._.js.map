{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 30, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/layout/Header.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport const Header = registerClientReference(\n    function() { throw new Error(\"Attempted to call Header() from the server but Header is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/components/layout/Header.tsx <module evaluation>\",\n    \"Header\",\n);\n"],"names":[],"mappings":";;;AAAA;;AACO,MAAM,SAAS,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACxC;IAAa,MAAM,IAAI,MAAM;AAA4N,GACzP,kEACA","debugId":null}},
    {"offset": {"line": 44, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/layout/Header.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport const Header = registerClientReference(\n    function() { throw new Error(\"Attempted to call Header() from the server but Header is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/components/layout/Header.tsx\",\n    \"Header\",\n);\n"],"names":[],"mappings":";;;AAAA;;AACO,MAAM,SAAS,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACxC;IAAa,MAAM,IAAI,MAAM;AAA4N,GACzP,8CACA","debugId":null}},
    {"offset": {"line": 58, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 68, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/layout/AppShell.tsx"],"sourcesContent":["\nimport type { ReactNode } from 'react';\nimport { Header } from './Header';\n\ninterface AppShellProps {\n  children: ReactNode;\n}\n\nexport function AppShell({ children }: AppShellProps) {\n  return (\n    <div className=\"flex min-h-screen flex-col\">\n      <Header />\n      <main className=\"flex-1\">\n        {children}\n      </main>\n      <footer className=\"py-6 md:px-8 md:py-0 border-t\">\n        <div className=\"container flex flex-col items-center justify-center gap-4 md:h-20 md:flex-row\">\n          <p className=\"text-center text-sm leading-loose text-muted-foreground\">\n            Built with ❤️ by AI for Chemistry enthusiasts.\n          </p>\n        </div>\n      </footer>\n    </div>\n  );\n}\n"],"names":[],"mappings":";;;;AAEA;;;AAMO,SAAS,SAAS,EAAE,QAAQ,EAAiB;IAClD,qBACE,8OAAC;QAAI,WAAU;;0BACb,8OAAC,sIAAA,CAAA,SAAM;;;;;0BACP,8OAAC;gBAAK,WAAU;0BACb;;;;;;0BAEH,8OAAC;gBAAO,WAAU;0BAChB,cAAA,8OAAC;oBAAI,WAAU;8BACb,cAAA,8OAAC;wBAAE,WAAU;kCAA0D;;;;;;;;;;;;;;;;;;;;;;AAOjF","debugId":null}},
    {"offset": {"line": 127, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/lectures/LectureCard.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport const LectureCard = registerClientReference(\n    function() { throw new Error(\"Attempted to call LectureCard() from the server but LectureCard is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/components/lectures/LectureCard.tsx <module evaluation>\",\n    \"LectureCard\",\n);\n"],"names":[],"mappings":";;;AAAA;;AACO,MAAM,cAAc,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EAC7C;IAAa,MAAM,IAAI,MAAM;AAAsO,GACnQ,yEACA","debugId":null}},
    {"offset": {"line": 141, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/lectures/LectureCard.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport const LectureCard = registerClientReference(\n    function() { throw new Error(\"Attempted to call LectureCard() from the server but LectureCard is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/components/lectures/LectureCard.tsx\",\n    \"LectureCard\",\n);\n"],"names":[],"mappings":";;;AAAA;;AACO,MAAM,cAAc,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EAC7C;IAAa,MAAM,IAAI,MAAM;AAAsO,GACnQ,qDACA","debugId":null}},
    {"offset": {"line": 155, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 269, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/lib/firebase.ts"],"sourcesContent":["\nimport { initializeApp, getApps, getApp } from 'firebase/app';\nimport { getAuth } from 'firebase/auth';\nimport { getFirestore } from 'firebase/firestore';\n\nconst firebaseConfig = {\n  apiKey: process.env.NEXT_PUBLIC_FIREBASE_API_KEY,\n  authDomain: process.env.NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN,\n  projectId: process.env.NEXT_PUBLIC_FIREBASE_PROJECT_ID,\n  storageBucket: process.env.NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET,\n  messagingSenderId: process.env.NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID,\n  appId: process.env.NEXT_PUBLIC_FIREBASE_APP_ID,\n};\n\n// Initialize Firebase\nconst app = !getApps().length ? initializeApp(firebaseConfig) : getApp();\nconst auth = getAuth(app);\nconst db = getFirestore(app);\n\nexport { app, auth, db };\n"],"names":[],"mappings":";;;;;AACA;AAAA;AACA;AAAA;AACA;AAAA;;;;AAEA,MAAM,iBAAiB;IACrB,MAAM;IACN,UAAU;IACV,SAAS;IACT,aAAa;IACb,iBAAiB;IACjB,KAAK;AACP;AAEA,sBAAsB;AACtB,MAAM,MAAM,CAAC,CAAA,GAAA,oLAAA,CAAA,UAAO,AAAD,IAAI,MAAM,GAAG,CAAA,GAAA,oLAAA,CAAA,gBAAa,AAAD,EAAE,kBAAkB,CAAA,GAAA,oLAAA,CAAA,SAAM,AAAD;AACrE,MAAM,OAAO,CAAA,GAAA,yOAAA,CAAA,UAAO,AAAD,EAAE;AACrB,MAAM,KAAK,CAAA,GAAA,iKAAA,CAAA,eAAY,AAAD,EAAE","debugId":null}},
    {"offset": {"line": 302, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/lib/services/lectureService.ts"],"sourcesContent":["\nimport {\n  collection,\n  doc,\n  getDoc,\n  getDocs,\n  addDoc,\n  updateDoc,\n  deleteDoc,\n  serverTimestamp,\n  query,\n  where,\n  orderBy,\n  Timestamp,\n  writeBatch,\n} from 'firebase/firestore';\nimport { db } from '@/lib/firebase';\nimport type { Lecture, Lesson, Quiz, LectureItemRef } from '@/lib/types';\n\nconst LECTURES_COLLECTION = 'lectures';\nconst LESSONS_COLLECTION = 'lessons';\nconst QUIZZES_COLLECTION = 'quizzes';\n\n// Helper to convert Firestore Timestamps to Dates if they exist\nfunction mapTimestampToDate<T extends { createdAt?: Timestamp | Date, updatedAt?: Timestamp | Date }>(data: T): T {\n  return {\n    ...data,\n    createdAt: data.createdAt instanceof Timestamp ? data.createdAt.toDate() : data.createdAt,\n    updatedAt: data.updatedAt instanceof Timestamp ? data.updatedAt.toDate() : data.updatedAt,\n  };\n}\n\n\n// --- Lecture Functions ---\nexport async function getAllLectures(): Promise<Lecture[]> {\n  try {\n    const lecturesSnapshot = await getDocs(query(collection(db, LECTURES_COLLECTION), orderBy('createdAt', 'desc')));\n    return lecturesSnapshot.docs.map(docSnap => \n        mapTimestampToDate({ id: docSnap.id, ...docSnap.data() } as Lecture)\n    );\n  } catch (error) {\n    console.error(\"Error fetching lectures:\", error);\n    return [];\n  }\n}\n\nexport async function getLectureById(id: string): Promise<Lecture | null> {\n  try {\n    const docRef = doc(db, LECTURES_COLLECTION, id);\n    const docSnap = await getDoc(docRef);\n    if (docSnap.exists()) {\n      return mapTimestampToDate({ id: docSnap.id, ...docSnap.data() } as Lecture);\n    }\n    return null;\n  } catch (error) {\n    console.error(\"Error fetching lecture by ID:\", error);\n    return null;\n  }\n}\n\nexport async function addLecture(lectureData: Omit<Lecture, 'id' | 'createdAt' | 'updatedAt' | 'itemCount'>): Promise<string | null> {\n  try {\n    const docRef = await addDoc(collection(db, LECTURES_COLLECTION), {\n      ...lectureData,\n      items: lectureData.items || [], // Ensure items is an array\n      itemCount: lectureData.items?.length || 0,\n      createdAt: serverTimestamp(),\n      updatedAt: serverTimestamp(),\n    });\n    return docRef.id;\n  } catch (error) {\n    console.error(\"Error adding lecture:\", error);\n    return null;\n  }\n}\n\nexport async function updateLecture(id: string, lectureData: Partial<Omit<Lecture, 'id' | 'createdAt' | 'itemCount'>>): Promise<boolean> {\n  try {\n    const docRef = doc(db, LECTURES_COLLECTION, id);\n    const updateData: Partial<Lecture> = {\n        ...lectureData,\n        updatedAt: serverTimestamp(),\n    };\n    if(lectureData.items) {\n        updateData.itemCount = lectureData.items.length;\n    }\n    await updateDoc(docRef, updateData);\n    return true;\n  } catch (error) {\n    console.error(\"Error updating lecture:\", error);\n    return false;\n  }\n}\n\nexport async function deleteLecture(id: string): Promise<boolean> {\n  try {\n    // Consider deleting associated lessons and quizzes, or handle orphaned data.\n    // For now, just deleting the lecture document.\n    // In a real app, use a batch write or a Firebase Function for cascading deletes.\n    const batch = writeBatch(db);\n    \n    const lectureDocRef = doc(db, LECTURES_COLLECTION, id);\n    batch.delete(lectureDocRef);\n\n    // Delete associated lessons\n    const lessonsQuery = query(collection(db, LESSONS_COLLECTION), where(\"lectureId\", \"==\", id));\n    const lessonsSnapshot = await getDocs(lessonsQuery);\n    lessonsSnapshot.forEach(docSnap => batch.delete(docSnap.ref));\n\n    // Delete associated quizzes\n    const quizzesQuery = query(collection(db, QUIZZES_COLLECTION), where(\"lectureId\", \"==\", id));\n    const quizzesSnapshot = await getDocs(quizzesQuery);\n    quizzesSnapshot.forEach(docSnap => batch.delete(docSnap.ref));\n    \n    await batch.commit();\n    return true;\n  } catch (error) {\n    console.error(\"Error deleting lecture:\", error);\n    return false;\n  }\n}\n\n// --- Lesson Functions ---\nexport async function getLessonById(id: string): Promise<Lesson | null> {\n  try {\n    const docRef = doc(db, LESSONS_COLLECTION, id);\n    const docSnap = await getDoc(docRef);\n    if (docSnap.exists()) {\n      return mapTimestampToDate({ id: docSnap.id, ...docSnap.data() } as Lesson);\n    }\n    return null;\n  } catch (error) {\n    console.error(\"Error fetching lesson by ID:\", error);\n    return null;\n  }\n}\n\nexport async function getLessonsForLecture(lectureId: string): Promise<Lesson[]> {\n  try {\n    const q = query(collection(db, LESSONS_COLLECTION), where(\"lectureId\", \"==\", lectureId));\n    const snapshot = await getDocs(q);\n    return snapshot.docs.map(docSnap => mapTimestampToDate({ id: docSnap.id, ...docSnap.data() } as Lesson));\n  } catch (error) {\n    console.error(\"Error fetching lessons for lecture:\", error);\n    return [];\n  }\n}\n\n\n// --- Quiz Functions ---\nexport async function getQuizById(id: string): Promise<Quiz | null> {\n  try {\n    const docRef = doc(db, QUIZZES_COLLECTION, id);\n    const docSnap = await getDoc(docRef);\n    if (docSnap.exists()) {\n      return mapTimestampToDate({ id: docSnap.id, ...docSnap.data() } as Quiz);\n    }\n    return null;\n  } catch (error) {\n    console.error(\"Error fetching quiz by ID:\", error);\n    return null;\n  }\n}\n\nexport async function getQuizzesForLecture(lectureId: string): Promise<Quiz[]> {\n   try {\n    const q = query(collection(db, QUIZZES_COLLECTION), where(\"lectureId\", \"==\", lectureId));\n    const snapshot = await getDocs(q);\n    return snapshot.docs.map(docSnap => mapTimestampToDate({ id: docSnap.id, ...docSnap.data() } as Quiz));\n  } catch (error)\n {\n    console.error(\"Error fetching quizzes for lecture:\", error);\n    return [];\n  }\n}\n\n// --- Lecture Item Management (Basic stubs, more complex logic needed) ---\n// Adding a lesson/quiz would also involve updating the 'items' array in the Lecture document.\n// This requires careful handling, potentially using transactions or batched writes.\n\nexport async function addLessonToLecture(lectureId: string, lessonData: Omit<Lesson, 'id' | 'createdAt' | 'updatedAt' | 'lectureId'>, order: number): Promise<string | null> {\n  const batch = writeBatch(db);\n  try {\n    const newLessonRef = doc(collection(db, LESSONS_COLLECTION));\n    batch.set(newLessonRef, {\n      ...lessonData,\n      lectureId,\n      createdAt: serverTimestamp(),\n      updatedAt: serverTimestamp(),\n    });\n\n    const lectureRef = doc(db, LECTURES_COLLECTION, lectureId);\n    const lectureSnap = await getDoc(lectureRef);\n    if (!lectureSnap.exists()) throw new Error(\"Lecture not found\");\n    \n    const lecture = lectureSnap.data() as Lecture;\n    const newLectureItem: LectureItemRef = { id: newLessonRef.id, title: lessonData.title, type: 'lesson', order };\n    const updatedItems = [...(lecture.items || []), newLectureItem].sort((a, b) => a.order - b.order);\n    \n    batch.update(lectureRef, { items: updatedItems, itemCount: updatedItems.length, updatedAt: serverTimestamp() });\n    \n    await batch.commit();\n    return newLessonRef.id;\n  } catch (error) {\n    console.error(\"Error adding lesson to lecture:\", error);\n    return null;\n  }\n}\n\n// Similar functions for addQuizToLecture, updateLectureItem, deleteLectureItem would be needed.\n// These are more complex due to managing the 'items' array in the Lecture doc and the separate Lesson/Quiz docs.\n// For this iteration, the admin panel will focus on Lecture CRUD. Item management within a lecture is a further step.\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 515, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/lib/data.ts"],"sourcesContent":["\nimport type { Lecture, Lesson, Quiz } from '@/lib/types';\nimport { getAllLectures as fetchAllLectures, getLectureById as fetchLectureById, getLessonById as fetchLessonById, getQuizById as fetchQuizById } from '@/lib/services/lectureService';\n\n// This file now acts as an adapter to the new async service layer.\n// Ideally, components would call the service functions directly.\n// For a smoother transition, existing sync function signatures are maintained but made async.\n\nexport async function getLectures(): Promise<Lecture[]> {\n  return fetchAllLectures();\n}\n\nexport async function getLectureById(id: string): Promise<Lecture | null> {\n  return fetchLectureById(id);\n}\n\nexport async function getLessonById(id: string): Promise<Lesson | null> {\n  return fetchLessonById(id);\n}\n\nexport async function getQuizById(id: string): Promise<Quiz | null> {\n  return fetchQuizById(id);\n}\n\n// The static arrays are removed as data is now in Firestore.\n// export const lessons: Lesson[] = [];\n// export const quizzes: Quiz[] = [];\n// export const lectures: Lecture[] = [];\n"],"names":[],"mappings":";;;;;;AAEA;;AAMO,eAAe;IACpB,OAAO,CAAA,GAAA,wIAAA,CAAA,iBAAgB,AAAD;AACxB;AAEO,eAAe,eAAe,EAAU;IAC7C,OAAO,CAAA,GAAA,wIAAA,CAAA,iBAAgB,AAAD,EAAE;AAC1B;AAEO,eAAe,cAAc,EAAU;IAC5C,OAAO,CAAA,GAAA,wIAAA,CAAA,gBAAe,AAAD,EAAE;AACzB;AAEO,eAAe,YAAY,EAAU;IAC1C,OAAO,CAAA,GAAA,wIAAA,CAAA,cAAa,AAAD,EAAE;AACvB,EAEA,6DAA6D;CAC7D,uCAAuC;CACvC,qCAAqC;CACrC,yCAAyC","debugId":null}},
    {"offset": {"line": 544, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/lectures/page.tsx"],"sourcesContent":["\nimport { AppShell } from '@/components/layout/AppShell';\nimport { LectureCard } from '@/components/lectures/LectureCard';\nimport { getLectures } from '@/lib/data'; // This now points to async version\nimport { BookCopy } from 'lucide-react';\n\n\nexport default async function LecturesPage() {\n  const lectures = await getLectures();\n\n  return (\n    <AppShell>\n      <div className=\"container mx-auto px-4 py-10\">\n        <div className=\"mb-8 text-center\">\n          <h1 className=\"text-4xl font-bold tracking-tight text-foreground\">\n            Explore Lectures\n          </h1>\n          <p className=\"mt-2 text-lg text-muted-foreground\">\n            Choose a lecture to start your chemistry learning journey.\n          </p>\n        </div>\n        \n        {lectures.length === 0 ? (\n           <div className=\"text-center py-20 bg-card rounded-lg shadow\">\n            <BookCopy className=\"mx-auto h-16 w-16 text-muted-foreground mb-6\" />\n            <h3 className=\"text-2xl font-semibold text-foreground mb-3\">No Lectures Available</h3>\n            <p className=\"text-muted-foreground\">\n              No lectures have been added yet. Please check back later or contact an administrator.\n            </p>\n          </div>\n        ) : (\n          <div className=\"grid grid-cols-1 gap-6 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4\">\n            {lectures.map((lecture) => (\n              <LectureCard key={lecture.id} lecture={lecture} />\n            ))}\n          </div>\n        )}\n      </div>\n    </AppShell>\n  );\n}\n"],"names":[],"mappings":";;;;AACA;AACA;AACA,sMAA0C,mCAAmC;AAC7E;;;;;;AAGe,eAAe;IAC5B,MAAM,WAAW,MAAM,CAAA,GAAA,kHAAA,CAAA,cAAW,AAAD;IAEjC,qBACE,8OAAC,wIAAA,CAAA,WAAQ;kBACP,cAAA,8OAAC;YAAI,WAAU;;8BACb,8OAAC;oBAAI,WAAU;;sCACb,8OAAC;4BAAG,WAAU;sCAAoD;;;;;;sCAGlE,8OAAC;4BAAE,WAAU;sCAAqC;;;;;;;;;;;;gBAKnD,SAAS,MAAM,KAAK,kBAClB,8OAAC;oBAAI,WAAU;;sCACd,8OAAC,8MAAA,CAAA,WAAQ;4BAAC,WAAU;;;;;;sCACpB,8OAAC;4BAAG,WAAU;sCAA8C;;;;;;sCAC5D,8OAAC;4BAAE,WAAU;sCAAwB;;;;;;;;;;;yCAKvC,8OAAC;oBAAI,WAAU;8BACZ,SAAS,GAAG,CAAC,CAAC,wBACb,8OAAC,6IAAA,CAAA,cAAW;4BAAkB,SAAS;2BAArB,QAAQ,EAAE;;;;;;;;;;;;;;;;;;;;;AAO1C","debugId":null}}]
}